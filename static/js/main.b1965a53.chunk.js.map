{"version":3,"sources":["components/Chart.js","components/BitcoinChart.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Chart","props","data","options","BitcoinChart","state","pastBTCData","lineChartData","labels","datasets","type","label","backgroundColor","borderColor","theme","palette","primary","main","pointBackgroundColor","secondary","pointBorderColor","borderWidth","lineTension","lineChartOptions","responsive","maintainAspectRatio","tooltips","enabled","scales","xAxes","ticks","autoSkip","maxTicksLimit","axios","get","then","res","console","log","prices","setState","catch","err","message","this","i","pastData","newData","push","chartData","concat","Date","toLocaleTimeString","subscribe","channels","name","product_ids","ws","WebSocket","onopen","send","JSON","stringify","onmessage","e","value","parse","oldBtcDataSet","newBtcDataSet","price","newChartData","close","classes","className","Component","withStyles","height","withTheme","App","Boolean","window","location","hostname","match","createMuiTheme","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","module","exports"],"mappings":"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","file":"static/js/main.b1965a53.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst Chart = (props) => <Line data={props.data} options={props.options} />;\r\n\r\nexport default Chart;\r\n","import React, { Component } from \"react\";\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport Chart from \"./Chart\";\r\nimport axios from \"axios\";\r\n\r\n//chart container style\r\nconst styles = (theme) => ({\r\n  \"chart-container\": {\r\n    height: 600,\r\n  },\r\n});\r\n\r\nclass BitcoinChart extends Component {\r\n  state = {\r\n    //array for saving response from axios get request\r\n    pastBTCData: [],\r\n\r\n    //chart js components\r\n    lineChartData: {\r\n      labels: [],\r\n      datasets: [\r\n        {\r\n          type: \"line\",\r\n          label: \"BTC-USD\",\r\n          backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n          borderColor: this.props.theme.palette.primary.main,\r\n          pointBackgroundColor: this.props.theme.palette.secondary.main,\r\n          pointBorderColor: this.props.theme.palette.secondary.main,\r\n          borderWidth: \"3\",\r\n          lineTension: 0.45,\r\n          data: [],\r\n        },\r\n      ],\r\n    },\r\n    lineChartOptions: {\r\n      responsive: true,\r\n      maintainAspectRatio: false,\r\n      tooltips: {\r\n        enabled: true,\r\n      },\r\n      scales: {\r\n        xAxes: [\r\n          {\r\n            ticks: {\r\n              autoSkip: true,\r\n              maxTicksLimit: 10,\r\n            },\r\n          },\r\n        ],\r\n      },\r\n    },\r\n  };\r\n\r\n  //Component Lifecycle\r\n  //mounting\r\n  async componentDidMount() {\r\n    //axios get request\r\n    await axios\r\n      .get(\r\n        \"https://api.coingecko.com/api/v3/coins/bitcoin/market_chart/?vs_currency=usd&days=100\"\r\n      )\r\n      .then((res) => {\r\n        console.log(res.data.prices);\r\n        this.setState({\r\n          pastBTCData: res.data.prices,\r\n        });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.message);\r\n      });\r\n\r\n    //setting up previous 100 days data and rendering to front end\r\n    const { pastBTCData } = this.state;\r\n    for (let i = 0; i < 100; i++) {\r\n      const pastData = this.state.lineChartData.datasets[0];\r\n      const newData = { ...pastData };\r\n      newData.data.push(pastBTCData[i][1]);\r\n      const chartData = {\r\n        ...this.state.lineChartData,\r\n        datasets: [newData],\r\n        labels: this.state.lineChartData.labels.concat(\r\n          new Date().toLocaleTimeString()\r\n        ),\r\n      };\r\n      this.setState({\r\n        lineChartData: chartData,\r\n      });\r\n    }\r\n\r\n    //for web socket connection\r\n    const subscribe = {\r\n      type: \"subscribe\",\r\n      channels: [\r\n        {\r\n          name: \"ticker\",\r\n          product_ids: [\"BTC-USD\"],\r\n        },\r\n      ],\r\n    };\r\n\r\n    this.ws = new WebSocket(\"wss://ws-feed.gdax.com\");\r\n\r\n    // send message object as json-formatted string\r\n    this.ws.onopen = () => {\r\n      this.ws.send(JSON.stringify(subscribe));\r\n    };\r\n\r\n    //receiving messages from the server\r\n    this.ws.onmessage = (e) => {\r\n      const value = JSON.parse(e.data);\r\n      if (value.type !== \"ticker\") {\r\n        return;\r\n      }\r\n\r\n      //setting up received value to chart and rendering it\r\n      const oldBtcDataSet = this.state.lineChartData.datasets[0];\r\n      const newBtcDataSet = { ...oldBtcDataSet };\r\n      newBtcDataSet.data.push(value.price);\r\n\r\n      const newChartData = {\r\n        ...this.state.lineChartData,\r\n        datasets: [newBtcDataSet],\r\n        labels: this.state.lineChartData.labels.concat(\r\n          new Date().toLocaleTimeString()\r\n        ),\r\n      };\r\n      this.setState({ lineChartData: newChartData });\r\n    };\r\n  }\r\n\r\n  //unmounting\r\n  componentWillUnmount() {\r\n    this.ws.close();\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n\r\n    return (\r\n      <div className={classes[\"chart-container\"]}>\r\n        <Chart\r\n          data={this.state.lineChartData}\r\n          options={this.state.lineChartOptions}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(BitcoinChart);\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport BitcoinChart from \"./components/BitcoinChart\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <BitcoinChart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme();\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <App />\n  </MuiThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}